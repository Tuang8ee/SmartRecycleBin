

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Sat Apr 16 18:00:21 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,merge=1,delta=2
    10                           	psect	text4,local,class=CODE,merge=1,delta=2
    11                           	psect	text5,local,class=CODE,merge=1,delta=2
    12                           	psect	text6,local,class=CODE,merge=1,delta=2
    13                           	psect	text7,local,class=CODE,merge=1,delta=2
    14                           	psect	text8,local,class=CODE,merge=1,delta=2
    15                           	psect	text9,local,class=CODE,merge=1,delta=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.36
    20                           ; Generated 28/01/2022 GMT
    21                           ; 
    22                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F877A Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000D                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0013                     	;# 
    75  0014                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001B                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  001D                     	;# 
    87  001E                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0086                     	;# 
    92  0087                     	;# 
    93  0088                     	;# 
    94  0089                     	;# 
    95  008C                     	;# 
    96  008D                     	;# 
    97  008E                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0094                     	;# 
   102  0098                     	;# 
   103  0099                     	;# 
   104  009C                     	;# 
   105  009D                     	;# 
   106  009E                     	;# 
   107  009F                     	;# 
   108  010C                     	;# 
   109  010D                     	;# 
   110  010E                     	;# 
   111  010F                     	;# 
   112  018C                     	;# 
   113  018D                     	;# 
   114  0000                     	;# 
   115  0001                     	;# 
   116  0002                     	;# 
   117  0003                     	;# 
   118  0004                     	;# 
   119  0005                     	;# 
   120  0006                     	;# 
   121  0007                     	;# 
   122  0008                     	;# 
   123  0009                     	;# 
   124  000A                     	;# 
   125  000B                     	;# 
   126  000C                     	;# 
   127  000D                     	;# 
   128  000E                     	;# 
   129  000E                     	;# 
   130  000F                     	;# 
   131  0010                     	;# 
   132  0011                     	;# 
   133  0012                     	;# 
   134  0013                     	;# 
   135  0014                     	;# 
   136  0015                     	;# 
   137  0015                     	;# 
   138  0016                     	;# 
   139  0017                     	;# 
   140  0018                     	;# 
   141  0019                     	;# 
   142  001A                     	;# 
   143  001B                     	;# 
   144  001B                     	;# 
   145  001C                     	;# 
   146  001D                     	;# 
   147  001E                     	;# 
   148  001F                     	;# 
   149  0081                     	;# 
   150  0085                     	;# 
   151  0086                     	;# 
   152  0087                     	;# 
   153  0088                     	;# 
   154  0089                     	;# 
   155  008C                     	;# 
   156  008D                     	;# 
   157  008E                     	;# 
   158  0091                     	;# 
   159  0092                     	;# 
   160  0093                     	;# 
   161  0094                     	;# 
   162  0098                     	;# 
   163  0099                     	;# 
   164  009C                     	;# 
   165  009D                     	;# 
   166  009E                     	;# 
   167  009F                     	;# 
   168  010C                     	;# 
   169  010D                     	;# 
   170  010E                     	;# 
   171  010F                     	;# 
   172  018C                     	;# 
   173  018D                     	;# 
   174  0008                     _PORTD	set	8
   175  0006                     _PORTB	set	6
   176  0005                     _PORTA	set	5
   177  0011                     _TMR2	set	17
   178  000E                     _TMR1L	set	14
   179  000F                     _TMR1H	set	15
   180  0001                     _TMR0	set	1
   181  0012                     _T2CON	set	18
   182  0010                     _T1CON	set	16
   183  000B                     _INTCON	set	11
   184  0007                     _PORTC	set	7
   185  0061                     _TMR2IF	set	97
   186  0060                     _TMR1IF	set	96
   187  005A                     _TMR0IF	set	90
   188  0091                     _T2CKPS1	set	145
   189  0092                     _TMR2ON	set	146
   190  0080                     _TMR1ON	set	128
   191  0081                     _TMR1CS	set	129
   192  0082                     _T1SYNC	set	130
   193  0083                     _T1OSCEN	set	131
   194  0089                     _TRISE	set	137
   195  0088                     _TRISD	set	136
   196  0087                     _TRISC	set	135
   197  0086                     _TRISB	set	134
   198  0085                     _TRISA	set	133
   199  0081                     _OPTION_REG	set	129
   200                           
   201                           	psect	cinit
   202  07FC                     start_initialization:	
   203                           ; #config settings
   204                           
   205  07FC                     __initialization:
   206  07FC                     end_of_initialization:	
   207                           ;End of C runtime variable initialization code
   208                           
   209  07FC                     __end_of__initialization:
   210  07FC  0183               	clrf	3
   211  07FD  120A  118A  2E6A   	ljmp	_main	;jump to C main() function
   212                           
   213                           	psect	cstackCOMMON
   214  0070                     __pcstackCOMMON:
   215  0070                     ?_Timer0_BASE_Init:
   216  0070                     ??_Timer0_BASE_Init:	
   217                           ; 1 bytes @ 0x0
   218                           
   219  0070                     ?_Timer1_BASE_Init:	
   220                           ; 1 bytes @ 0x0
   221                           
   222  0070                     ??_Timer1_BASE_Init:	
   223                           ; 1 bytes @ 0x0
   224                           
   225  0070                     ?_Timer2_BASE_Init:	
   226                           ; 1 bytes @ 0x0
   227                           
   228  0070                     ??_Timer2_BASE_Init:	
   229                           ; 1 bytes @ 0x0
   230                           
   231  0070                     ?_MCU_Config:	
   232                           ; 1 bytes @ 0x0
   233                           
   234  0070                     ??_MCU_Config:	
   235                           ; 1 bytes @ 0x0
   236                           
   237  0070                     ?_GPIO_Write:	
   238                           ; 1 bytes @ 0x0
   239                           
   240  0070                     ?_GPIO_Read:	
   241                           ; 1 bytes @ 0x0
   242                           
   243  0070                     ?_Loop:	
   244                           ; 1 bytes @ 0x0
   245                           
   246  0070                     ?_main:	
   247                           ; 1 bytes @ 0x0
   248                           
   249  0070                     GPIO_Write@GPIO_Port:	
   250                           ; 1 bytes @ 0x0
   251                           
   252  0070                     GPIO_Read@GPIO_Port:	
   253                           ; 2 bytes @ 0x0
   254                           
   255                           
   256                           ; 2 bytes @ 0x0
   257  0070                     	ds	1
   258  0071                     ?_Timer_Delay:
   259  0071                     Timer_Delay@value:	
   260                           ; 1 bytes @ 0x1
   261                           
   262                           
   263                           ; 2 bytes @ 0x1
   264  0071                     	ds	1
   265  0072                     GPIO_Write@Pin:
   266  0072                     GPIO_Read@Pin:	
   267                           ; 1 bytes @ 0x2
   268                           
   269                           
   270                           ; 1 bytes @ 0x2
   271  0072                     	ds	1
   272  0073                     ??_Timer_Delay:
   273  0073                     ??_GPIO_Read:	
   274                           ; 1 bytes @ 0x3
   275                           
   276  0073                     GPIO_Write@GPIO_State:	
   277                           ; 1 bytes @ 0x3
   278                           
   279                           
   280                           ; 1 bytes @ 0x3
   281  0073                     	ds	1
   282  0074                     ??_GPIO_Write:
   283  0074                     GPIO_Read@GPIO_State:	
   284                           ; 1 bytes @ 0x4
   285                           
   286                           
   287                           ; 1 bytes @ 0x4
   288  0074                     	ds	1
   289  0075                     Timer_Delay@timer_counter:
   290                           
   291                           ; 1 bytes @ 0x5
   292  0075                     	ds	1
   293  0076                     ?_GPIO_Toggle:
   294  0076                     GPIO_Toggle@GPIO_Port:	
   295                           ; 1 bytes @ 0x6
   296                           
   297                           
   298                           ; 2 bytes @ 0x6
   299  0076                     	ds	2
   300  0078                     GPIO_Toggle@Pin:
   301                           
   302                           ; 1 bytes @ 0x8
   303  0078                     	ds	1
   304  0079                     ??_GPIO_Toggle:
   305                           
   306                           ; 1 bytes @ 0x9
   307  0079                     	ds	1
   308  007A                     ??_Loop:
   309  007A                     ??_main:	
   310                           ; 1 bytes @ 0xA
   311                           
   312                           
   313                           	psect	maintext
   314  066A                     __pmaintext:	
   315                           ; 1 bytes @ 0xA
   316 ;;
   317 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   318 ;;
   319 ;; *************** function _main *****************
   320 ;; Defined at:
   321 ;;		line 11 in file "Source/main.c"
   322 ;; Parameters:    Size  Location     Type
   323 ;;		None
   324 ;; Auto vars:     Size  Location     Type
   325 ;;		None
   326 ;; Return value:  Size  Location     Type
   327 ;;                  1    wreg      void 
   328 ;; Registers used:
   329 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   330 ;; Tracked objects:
   331 ;;		On entry : B00/0
   332 ;;		On exit  : 0/0
   333 ;;		Unchanged: 0/0
   334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   335 ;;      Params:         0       0       0       0       0
   336 ;;      Locals:         0       0       0       0       0
   337 ;;      Temps:          0       0       0       0       0
   338 ;;      Totals:         0       0       0       0       0
   339 ;;Total ram usage:        0 bytes
   340 ;; Hardware stack levels required when called: 3
   341 ;; This function calls:
   342 ;;		_Loop
   343 ;;		_MCU_Config
   344 ;; This function is called by:
   345 ;;		Startup code after reset
   346 ;; This function uses a non-reentrant model
   347 ;;
   348                           
   349  066A                     _main:	
   350                           ;psect for function _main
   351                           
   352  066A                     l1006:	
   353                           ;incstack = 0
   354                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   355                           
   356                           
   357                           ;Source/main.c: 13:     MCU_Config();
   358  066A  120A  118A  264A  120A  118A  	fcall	_MCU_Config
   359  066F                     l1008:
   360                           
   361                           ;Source/main.c: 15:     {;Source/main.c: 16:         Loop();
   362  066F  120A  118A  2678  120A  118A  	fcall	_Loop
   363  0674  2E6F               	goto	l1008
   364  0675  120A  118A  2800   	ljmp	start
   365  0678                     __end_of_main:
   366                           
   367                           	psect	text1
   368  064A                     __ptext1:	
   369 ;; *************** function _MCU_Config *****************
   370 ;; Defined at:
   371 ;;		line 12 in file "Source/Header/Configuration.h"
   372 ;; Parameters:    Size  Location     Type
   373 ;;		None
   374 ;; Auto vars:     Size  Location     Type
   375 ;;		None
   376 ;; Return value:  Size  Location     Type
   377 ;;                  1    wreg      void 
   378 ;; Registers used:
   379 ;;		None
   380 ;; Tracked objects:
   381 ;;		On entry : 0/0
   382 ;;		On exit  : 0/0
   383 ;;		Unchanged: 0/0
   384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   385 ;;      Params:         0       0       0       0       0
   386 ;;      Locals:         0       0       0       0       0
   387 ;;      Temps:          0       0       0       0       0
   388 ;;      Totals:         0       0       0       0       0
   389 ;;Total ram usage:        0 bytes
   390 ;; Hardware stack levels used: 1
   391 ;; This function calls:
   392 ;;		Nothing
   393 ;; This function is called by:
   394 ;;		_main
   395 ;; This function uses a non-reentrant model
   396 ;;
   397                           
   398  064A                     _MCU_Config:	
   399                           ;psect for function _MCU_Config
   400                           
   401  064A                     l91:	
   402                           ;incstack = 0
   403                           ; Regs used in _MCU_Config: []
   404                           
   405  064A  0008               	return
   406  064B                     __end_of_MCU_Config:
   407                           
   408                           	psect	text2
   409  0678                     __ptext2:	
   410 ;; *************** function _Loop *****************
   411 ;; Defined at:
   412 ;;		line 5 in file "Source/main.c"
   413 ;; Parameters:    Size  Location     Type
   414 ;;		None
   415 ;; Auto vars:     Size  Location     Type
   416 ;;		None
   417 ;; Return value:  Size  Location     Type
   418 ;;                  1    wreg      void 
   419 ;; Registers used:
   420 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   421 ;; Tracked objects:
   422 ;;		On entry : 0/0
   423 ;;		On exit  : 0/0
   424 ;;		Unchanged: 0/0
   425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   426 ;;      Params:         0       0       0       0       0
   427 ;;      Locals:         0       0       0       0       0
   428 ;;      Temps:          0       0       0       0       0
   429 ;;      Totals:         0       0       0       0       0
   430 ;;Total ram usage:        0 bytes
   431 ;; Hardware stack levels used: 1
   432 ;; Hardware stack levels required when called: 2
   433 ;; This function calls:
   434 ;;		_GPIO_Toggle
   435 ;;		_Timer_Delay
   436 ;; This function is called by:
   437 ;;		_main
   438 ;; This function uses a non-reentrant model
   439 ;;
   440                           
   441  0678                     _Loop:	
   442                           ;psect for function _Loop
   443                           
   444  0678                     l1004:	
   445                           ;incstack = 0
   446                           ; Regs used in _Loop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   447                           
   448                           
   449                           ;Source/main.c: 7:     GPIO_Toggle(&PORTC, 1);
   450  0678  3007               	movlw	7
   451  0679  00F6               	movwf	GPIO_Toggle@GPIO_Port
   452  067A  3000               	movlw	0
   453  067B  00F7               	movwf	GPIO_Toggle@GPIO_Port+1
   454  067C  01F8               	clrf	GPIO_Toggle@Pin
   455  067D  0AF8               	incf	GPIO_Toggle@Pin,f
   456  067E  120A  118A  26A8  120A  118A  	fcall	_GPIO_Toggle
   457                           
   458                           ;Source/main.c: 9:     Timer_Delay(2, 1000);
   459  0683  30E8               	movlw	232
   460  0684  00F1               	movwf	Timer_Delay@value
   461  0685  3003               	movlw	3
   462  0686  00F2               	movwf	Timer_Delay@value+1
   463  0687  3002               	movlw	2
   464  0688  120A  118A  26D9  120A  118A  	fcall	_Timer_Delay
   465  068D                     l120:
   466  068D  0008               	return
   467  068E                     __end_of_Loop:
   468                           
   469                           	psect	text3
   470  06D9                     __ptext3:	
   471 ;; *************** function _Timer_Delay *****************
   472 ;; Defined at:
   473 ;;		line 146 in file "Source/Header/Timer.h"
   474 ;; Parameters:    Size  Location     Type
   475 ;;  timer_counte    1    wreg     unsigned char 
   476 ;;  value           2    1[COMMON] unsigned int 
   477 ;; Auto vars:     Size  Location     Type
   478 ;;  timer_counte    1    5[COMMON] unsigned char 
   479 ;; Return value:  Size  Location     Type
   480 ;;                  1    wreg      unsigned char 
   481 ;; Registers used:
   482 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   483 ;; Tracked objects:
   484 ;;		On entry : 0/0
   485 ;;		On exit  : 0/0
   486 ;;		Unchanged: 0/0
   487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   488 ;;      Params:         2       0       0       0       0
   489 ;;      Locals:         1       0       0       0       0
   490 ;;      Temps:          2       0       0       0       0
   491 ;;      Totals:         5       0       0       0       0
   492 ;;Total ram usage:        5 bytes
   493 ;; Hardware stack levels used: 1
   494 ;; Hardware stack levels required when called: 1
   495 ;; This function calls:
   496 ;;		_Timer0_BASE_Init
   497 ;;		_Timer1_BASE_Init
   498 ;;		_Timer2_BASE_Init
   499 ;; This function is called by:
   500 ;;		_Loop
   501 ;; This function uses a non-reentrant model
   502 ;;
   503                           
   504  06D9                     _Timer_Delay:	
   505                           ;psect for function _Timer_Delay
   506                           
   507                           
   508                           ;incstack = 0
   509                           ; Regs used in _Timer_Delay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   510                           ;Timer_Delay@timer_counter stored from wreg
   511  06D9  00F5               	movwf	Timer_Delay@timer_counter
   512  06DA                     l964:
   513                           
   514                           ;Source/Header/Timer.h: 146:     uint8_t Timer_Delay(uint8_t timer_counter, uint16_t val
      +                          ue);Source/Header/Timer.h: 147:     {;Source/Header/Timer.h: 149:         switch(timer_c
      +                          ounter)
   515  06DA  2EF2               	goto	l976
   516  06DB                     l966:
   517                           
   518                           ;Source/Header/Timer.h: 152:                 Timer0_BASE_Init();
   519  06DB  120A  118A  265D  120A  118A  	fcall	_Timer0_BASE_Init
   520                           
   521                           ;Source/Header/Timer.h: 153:                 break;
   522  06E0  2F38               	goto	l988
   523  06E1                     l968:
   524                           
   525                           ;Source/Header/Timer.h: 155:                 Timer1_BASE_Init();
   526  06E1  120A  118A  2651  120A  118A  	fcall	_Timer1_BASE_Init
   527                           
   528                           ;Source/Header/Timer.h: 156:                 break;
   529  06E6  2F38               	goto	l988
   530  06E7                     l970:
   531                           
   532                           ;Source/Header/Timer.h: 158:                 value = value * 2;
   533  06E7  1003               	clrc
   534  06E8  0D71               	rlf	Timer_Delay@value,w
   535  06E9  00F1               	movwf	Timer_Delay@value
   536  06EA  0D72               	rlf	Timer_Delay@value+1,w
   537  06EB  00F2               	movwf	Timer_Delay@value+1
   538  06EC                     l972:
   539                           
   540                           ;Source/Header/Timer.h: 159:                 Timer2_BASE_Init();
   541  06EC  120A  118A  264B  120A  118A  	fcall	_Timer2_BASE_Init
   542                           
   543                           ;Source/Header/Timer.h: 160:                 break;
   544  06F1  2F38               	goto	l988
   545  06F2                     l976:
   546  06F2  0875               	movf	Timer_Delay@timer_counter,w
   547  06F3  00F3               	movwf	??_Timer_Delay
   548  06F4  01F4               	clrf	??_Timer_Delay+1
   549                           
   550                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   551                           ; Switch size 1, requested type "simple"
   552                           ; Number of cases is 1, Range of values is 0 to 0
   553                           ; switch strategies available:
   554                           ; Name         Instructions Cycles
   555                           ; simple_byte            4     3 (average)
   556                           ; direct_byte           11     8 (fixed)
   557                           ; jumptable            260     6 (fixed)
   558                           ;	Chosen strategy is simple_byte
   559  06F5  0874               	movf	??_Timer_Delay+1,w
   560  06F6  3A00               	xorlw	0	; case 0
   561  06F7  1903               	skipnz
   562  06F8  2EFA               	goto	l1080
   563  06F9  2F46               	goto	l70
   564  06FA                     l1080:
   565                           
   566                           ; Switch size 1, requested type "simple"
   567                           ; Number of cases is 3, Range of values is 0 to 2
   568                           ; switch strategies available:
   569                           ; Name         Instructions Cycles
   570                           ; simple_byte           10     6 (average)
   571                           ; direct_byte           17     8 (fixed)
   572                           ; jumptable            260     6 (fixed)
   573                           ;	Chosen strategy is simple_byte
   574  06FA  0873               	movf	??_Timer_Delay,w
   575  06FB  3A00               	xorlw	0	; case 0
   576  06FC  1903               	skipnz
   577  06FD  2EDB               	goto	l966
   578  06FE  3A01               	xorlw	1	; case 1
   579  06FF  1903               	skipnz
   580  0700  2EE1               	goto	l968
   581  0701  3A03               	xorlw	3	; case 2
   582  0702  1903               	skipnz
   583  0703  2EE7               	goto	l970
   584  0704  2F46               	goto	l70
   585  0705                     l74:	
   586                           ;Source/Header/Timer.h: 168:             {;Source/Header/Timer.h: 169:                 c
      +                          ase 0:
   587                           
   588                           
   589                           ;Source/Header/Timer.h: 171:                     TMR0IF = 0;
   590  0705  110B               	bcf	11,2	;volatile
   591  0706                     l978:
   592                           
   593                           ;Source/Header/Timer.h: 173:                     TMR0 = 100;
   594  0706  3064               	movlw	100
   595  0707  1283               	bcf	3,5	;RP0=0, select bank0
   596  0708  1303               	bcf	3,6	;RP1=0, select bank0
   597  0709  0081               	movwf	1	;volatile
   598  070A                     l75:	
   599                           ;Source/Header/Timer.h: 175:                     while(!TMR0IF);
   600                           
   601  070A  1D0B               	btfss	11,2	;volatile
   602  070B  2F0D               	goto	u321
   603  070C  2F0E               	goto	u320
   604  070D                     u321:
   605  070D  2F0A               	goto	l75
   606  070E                     u320:
   607  070E  2F38               	goto	l988
   608  070F                     l79:	
   609                           ;Source/Header/Timer.h: 177:                 case 1:
   610                           
   611                           
   612                           ;Source/Header/Timer.h: 179:                     TMR1IF = 0;
   613  070F  1283               	bcf	3,5	;RP0=0, select bank0
   614  0710  1303               	bcf	3,6	;RP1=0, select bank0
   615  0711  100C               	bcf	12,0	;volatile
   616  0712                     l980:
   617                           
   618                           ;Source/Header/Timer.h: 181:                     TMR1H = (0xFFFF - (155 * 4)) >> 8;
   619  0712  30FD               	movlw	253
   620  0713  008F               	movwf	15	;volatile
   621                           
   622                           ;Source/Header/Timer.h: 182:                     TMR1L = (0xFFFF - (155 * 4)) & 0x00FF;
   623  0714  3093               	movlw	147
   624  0715  008E               	movwf	14	;volatile
   625  0716                     l80:	
   626                           ;Source/Header/Timer.h: 184:                     while(!TMR1IF);
   627                           
   628  0716  1C0C               	btfss	12,0	;volatile
   629  0717  2F19               	goto	u331
   630  0718  2F1A               	goto	u330
   631  0719                     u331:
   632  0719  2F16               	goto	l80
   633  071A                     u330:
   634  071A  2F38               	goto	l988
   635  071B                     l83:	
   636                           ;Source/Header/Timer.h: 186:                 case 2:
   637                           
   638                           
   639                           ;Source/Header/Timer.h: 187:                     TMR2IF = 0;
   640  071B  1283               	bcf	3,5	;RP0=0, select bank0
   641  071C  1303               	bcf	3,6	;RP1=0, select bank0
   642  071D  108C               	bcf	12,1	;volatile
   643  071E                     l982:
   644                           
   645                           ;Source/Header/Timer.h: 189:                     TMR2 = 100;
   646  071E  3064               	movlw	100
   647  071F  0091               	movwf	17	;volatile
   648  0720                     l84:	
   649                           ;Source/Header/Timer.h: 191:                     while(!TMR2IF);
   650                           
   651  0720  1C8C               	btfss	12,1	;volatile
   652  0721  2F23               	goto	u341
   653  0722  2F24               	goto	u340
   654  0723                     u341:
   655  0723  2F20               	goto	l84
   656  0724                     u340:
   657  0724  2F38               	goto	l988
   658  0725                     l986:
   659  0725  0875               	movf	Timer_Delay@timer_counter,w
   660  0726  00F3               	movwf	??_Timer_Delay
   661  0727  01F4               	clrf	??_Timer_Delay+1
   662                           
   663                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   664                           ; Switch size 1, requested type "simple"
   665                           ; Number of cases is 1, Range of values is 0 to 0
   666                           ; switch strategies available:
   667                           ; Name         Instructions Cycles
   668                           ; simple_byte            4     3 (average)
   669                           ; direct_byte           11     8 (fixed)
   670                           ; jumptable            260     6 (fixed)
   671                           ;	Chosen strategy is simple_byte
   672  0728  0874               	movf	??_Timer_Delay+1,w
   673  0729  3A00               	xorlw	0	; case 0
   674  072A  1903               	skipnz
   675  072B  2F2D               	goto	l1082
   676  072C  2F46               	goto	l70
   677  072D                     l1082:
   678                           
   679                           ; Switch size 1, requested type "simple"
   680                           ; Number of cases is 3, Range of values is 0 to 2
   681                           ; switch strategies available:
   682                           ; Name         Instructions Cycles
   683                           ; simple_byte           10     6 (average)
   684                           ; direct_byte           17     8 (fixed)
   685                           ; jumptable            260     6 (fixed)
   686                           ;	Chosen strategy is simple_byte
   687  072D  0873               	movf	??_Timer_Delay,w
   688  072E  3A00               	xorlw	0	; case 0
   689  072F  1903               	skipnz
   690  0730  2F05               	goto	l74
   691  0731  3A01               	xorlw	1	; case 1
   692  0732  1903               	skipnz
   693  0733  2F0F               	goto	l79
   694  0734  3A03               	xorlw	3	; case 2
   695  0735  1903               	skipnz
   696  0736  2F1B               	goto	l83
   697  0737  2F46               	goto	l70
   698  0738                     l988:
   699                           
   700                           ;Source/Header/Timer.h: 165:         while(value--)
   701  0738  3001               	movlw	1
   702  0739  02F1               	subwf	Timer_Delay@value,f
   703  073A  3000               	movlw	0
   704  073B  1C03               	skipc
   705  073C  03F2               	decf	Timer_Delay@value+1,f
   706  073D  02F2               	subwf	Timer_Delay@value+1,f
   707  073E  0A71               	incf	Timer_Delay@value,w
   708  073F  1D03               	skipz
   709  0740  2F45               	goto	u351
   710  0741  0A72               	incf	Timer_Delay@value+1,w
   711  0742  1D03               	btfss	3,2
   712  0743  2F45               	goto	u351
   713  0744  2F46               	goto	u350
   714  0745                     u351:
   715  0745  2F25               	goto	l986
   716  0746                     u350:
   717  0746                     l70:
   718  0746  0008               	return
   719  0747                     __end_of_Timer_Delay:
   720                           
   721                           	psect	text4
   722  064B                     __ptext4:	
   723 ;; *************** function _Timer2_BASE_Init *****************
   724 ;; Defined at:
   725 ;;		line 138 in file "Source/Header/Timer.h"
   726 ;; Parameters:    Size  Location     Type
   727 ;;		None
   728 ;; Auto vars:     Size  Location     Type
   729 ;;		None
   730 ;; Return value:  Size  Location     Type
   731 ;;                  1    wreg      void 
   732 ;; Registers used:
   733 ;;		status,2
   734 ;; Tracked objects:
   735 ;;		On entry : 0/0
   736 ;;		On exit  : 0/0
   737 ;;		Unchanged: 0/0
   738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   739 ;;      Params:         0       0       0       0       0
   740 ;;      Locals:         0       0       0       0       0
   741 ;;      Temps:          0       0       0       0       0
   742 ;;      Totals:         0       0       0       0       0
   743 ;;Total ram usage:        0 bytes
   744 ;; Hardware stack levels used: 1
   745 ;; This function calls:
   746 ;;		Nothing
   747 ;; This function is called by:
   748 ;;		_Timer_Delay
   749 ;; This function uses a non-reentrant model
   750 ;;
   751                           
   752  064B                     _Timer2_BASE_Init:	
   753                           ;psect for function _Timer2_BASE_Init
   754                           
   755  064B                     l750:	
   756                           ;incstack = 0
   757                           ; Regs used in _Timer2_BASE_Init: [status,2]
   758                           
   759                           
   760                           ;Source/Header/Timer.h: 140:         T2CON = 0x00;
   761  064B  1283               	bcf	3,5	;RP0=0, select bank0
   762  064C  1303               	bcf	3,6	;RP1=0, select bank0
   763  064D  0192               	clrf	18	;volatile
   764  064E                     l752:
   765                           
   766                           ;Source/Header/Timer.h: 141:         TMR2ON = 1;
   767  064E  1512               	bsf	18,2	;volatile
   768  064F                     l754:
   769                           
   770                           ;Source/Header/Timer.h: 142:         T2CKPS1 = 1;
   771  064F  1492               	bsf	18,1	;volatile
   772  0650                     l61:
   773  0650  0008               	return
   774  0651                     __end_of_Timer2_BASE_Init:
   775                           
   776                           	psect	text5
   777  0651                     __ptext5:	
   778 ;; *************** function _Timer1_BASE_Init *****************
   779 ;; Defined at:
   780 ;;		line 91 in file "Source/Header/Timer.h"
   781 ;; Parameters:    Size  Location     Type
   782 ;;		None
   783 ;; Auto vars:     Size  Location     Type
   784 ;;		None
   785 ;; Return value:  Size  Location     Type
   786 ;;                  1    wreg      void 
   787 ;; Registers used:
   788 ;;		wreg, status,2, status,0
   789 ;; Tracked objects:
   790 ;;		On entry : 0/0
   791 ;;		On exit  : 0/0
   792 ;;		Unchanged: 0/0
   793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   794 ;;      Params:         0       0       0       0       0
   795 ;;      Locals:         0       0       0       0       0
   796 ;;      Temps:          1       0       0       0       0
   797 ;;      Totals:         1       0       0       0       0
   798 ;;Total ram usage:        1 bytes
   799 ;; Hardware stack levels used: 1
   800 ;; This function calls:
   801 ;;		Nothing
   802 ;; This function is called by:
   803 ;;		_Timer_Delay
   804 ;; This function uses a non-reentrant model
   805 ;;
   806                           
   807  0651                     _Timer1_BASE_Init:	
   808                           ;psect for function _Timer1_BASE_Init
   809                           
   810  0651                     l738:	
   811                           ;incstack = 0
   812                           ; Regs used in _Timer1_BASE_Init: [wreg+status,2+status,0]
   813                           
   814                           
   815                           ;Source/Header/Timer.h: 94:         T1CON = 0x00;
   816  0651  1283               	bcf	3,5	;RP0=0, select bank0
   817  0652  1303               	bcf	3,6	;RP1=0, select bank0
   818  0653  0190               	clrf	16	;volatile
   819  0654                     l740:
   820                           
   821                           ;Source/Header/Timer.h: 104:         T1CON |= (3 << 4);
   822  0654  3030               	movlw	48
   823  0655  00F0               	movwf	??_Timer1_BASE_Init
   824  0656  0870               	movf	??_Timer1_BASE_Init,w
   825  0657  0490               	iorwf	16,f	;volatile
   826  0658                     l742:
   827                           
   828                           ;Source/Header/Timer.h: 110:         T1OSCEN = 0;
   829  0658  1190               	bcf	16,3	;volatile
   830  0659                     l744:
   831                           
   832                           ;Source/Header/Timer.h: 119:         T1SYNC = 0;
   833  0659  1110               	bcf	16,2	;volatile
   834  065A                     l746:
   835                           
   836                           ;Source/Header/Timer.h: 125:         TMR1CS = 0;
   837  065A  1090               	bcf	16,1	;volatile
   838  065B                     l748:
   839                           
   840                           ;Source/Header/Timer.h: 131:         TMR1ON = 1;
   841  065B  1410               	bsf	16,0	;volatile
   842  065C                     l58:
   843  065C  0008               	return
   844  065D                     __end_of_Timer1_BASE_Init:
   845                           
   846                           	psect	text6
   847  065D                     __ptext6:	
   848 ;; *************** function _Timer0_BASE_Init *****************
   849 ;; Defined at:
   850 ;;		line 19 in file "Source/Header/Timer.h"
   851 ;; Parameters:    Size  Location     Type
   852 ;;		None
   853 ;; Auto vars:     Size  Location     Type
   854 ;;		None
   855 ;; Return value:  Size  Location     Type
   856 ;;                  1    wreg      void 
   857 ;; Registers used:
   858 ;;		wreg, status,2
   859 ;; Tracked objects:
   860 ;;		On entry : 0/0
   861 ;;		On exit  : 0/0
   862 ;;		Unchanged: 0/0
   863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   864 ;;      Params:         0       0       0       0       0
   865 ;;      Locals:         0       0       0       0       0
   866 ;;      Temps:          0       0       0       0       0
   867 ;;      Totals:         0       0       0       0       0
   868 ;;Total ram usage:        0 bytes
   869 ;; Hardware stack levels used: 1
   870 ;; This function calls:
   871 ;;		Nothing
   872 ;; This function is called by:
   873 ;;		_Timer_Delay
   874 ;; This function uses a non-reentrant model
   875 ;;
   876                           
   877  065D                     _Timer0_BASE_Init:	
   878                           ;psect for function _Timer0_BASE_Init
   879                           
   880  065D                     l720:	
   881                           ;incstack = 0
   882                           ; Regs used in _Timer0_BASE_Init: [wreg+status,2]
   883                           
   884                           
   885                           ;Source/Header/Timer.h: 22:         INTCON = 0x00;
   886  065D  018B               	clrf	11	;volatile
   887                           
   888                           ;Source/Header/Timer.h: 23:         OPTION_REG = 0x00;
   889  065E  1683               	bsf	3,5	;RP0=1, select bank1
   890  065F  1303               	bcf	3,6	;RP1=0, select bank1
   891  0660  0181               	clrf	1	;volatile
   892  0661                     l722:
   893                           
   894                           ;Source/Header/Timer.h: 31:         OPTION_REG |= (0 << 5);
   895  0661  0801               	movf	1,w	;volatile
   896  0662                     l724:
   897                           
   898                           ;Source/Header/Timer.h: 37:         OPTION_REG |= (0 << 4);
   899  0662  0801               	movf	1,w	;volatile
   900  0663                     l726:
   901                           
   902                           ;Source/Header/Timer.h: 43:         OPTION_REG |= (0 << 3);
   903  0663  0801               	movf	1,w	;volatile
   904  0664                     l728:
   905                           
   906                           ;Source/Header/Timer.h: 58:         OPTION_REG |= (4 << 0);
   907  0664  1501               	bsf	1,2	;volatile
   908  0665                     l730:
   909                           
   910                           ;Source/Header/Timer.h: 66:         INTCON |= (0 << 7);
   911  0665  080B               	movf	11,w	;volatile
   912  0666                     l732:
   913                           
   914                           ;Source/Header/Timer.h: 72:         INTCON |= (0 << 6);
   915  0666  080B               	movf	11,w	;volatile
   916  0667                     l734:
   917                           
   918                           ;Source/Header/Timer.h: 78:         INTCON |= (0 << 5);
   919  0667  080B               	movf	11,w	;volatile
   920  0668                     l736:
   921                           
   922                           ;Source/Header/Timer.h: 84:         INTCON |= (0 << 2);
   923  0668  080B               	movf	11,w	;volatile
   924  0669                     l55:
   925  0669  0008               	return
   926  066A                     __end_of_Timer0_BASE_Init:
   927                           
   928                           	psect	text7
   929  06A8                     __ptext7:	
   930 ;; *************** function _GPIO_Toggle *****************
   931 ;; Defined at:
   932 ;;		line 63 in file "Source/Header/GPIO.h"
   933 ;; Parameters:    Size  Location     Type
   934 ;;  GPIO_Port       2    6[COMMON] PTR volatile unsigned ch
   935 ;;		 -> PORTC(1), 
   936 ;;  Pin             1    8[COMMON] unsigned char 
   937 ;; Auto vars:     Size  Location     Type
   938 ;;		None
   939 ;; Return value:  Size  Location     Type
   940 ;;                  1    wreg      void 
   941 ;; Registers used:
   942 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   943 ;; Tracked objects:
   944 ;;		On entry : 0/0
   945 ;;		On exit  : 0/0
   946 ;;		Unchanged: 0/0
   947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   948 ;;      Params:         3       0       0       0       0
   949 ;;      Locals:         0       0       0       0       0
   950 ;;      Temps:          1       0       0       0       0
   951 ;;      Totals:         4       0       0       0       0
   952 ;;Total ram usage:        4 bytes
   953 ;; Hardware stack levels used: 1
   954 ;; Hardware stack levels required when called: 1
   955 ;; This function calls:
   956 ;;		_GPIO_Read
   957 ;;		_GPIO_Write
   958 ;; This function is called by:
   959 ;;		_Loop
   960 ;; This function uses a non-reentrant model
   961 ;;
   962                           
   963  06A8                     _GPIO_Toggle:	
   964                           ;psect for function _GPIO_Toggle
   965                           
   966  06A8                     l998:	
   967                           ;incstack = 0
   968                           ; Regs used in _GPIO_Toggle: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   969                           
   970                           
   971                           ;Source/Header/GPIO.h: 63:     void GPIO_Toggle(volatile unsigned char *GPIO_Port, unsig
      +                          ned char Pin);Source/Header/GPIO.h: 64:     {;Source/Header/GPIO.h: 65:         if(GPIO_
      +                          Read(GPIO_Port, Pin))
   972  06A8  0876               	movf	GPIO_Toggle@GPIO_Port,w
   973  06A9  00F0               	movwf	GPIO_Read@GPIO_Port
   974  06AA  0877               	movf	GPIO_Toggle@GPIO_Port+1,w
   975  06AB  00F1               	movwf	GPIO_Read@GPIO_Port+1
   976  06AC  0878               	movf	GPIO_Toggle@Pin,w
   977  06AD  00F9               	movwf	??_GPIO_Toggle
   978  06AE  0879               	movf	??_GPIO_Toggle,w
   979  06AF  00F2               	movwf	GPIO_Read@Pin
   980  06B0  120A  118A  268E  120A  118A  	fcall	_GPIO_Read
   981  06B5  3A00               	xorlw	0
   982  06B6  1903               	skipnz
   983  06B7  2EB9               	goto	u361
   984  06B8  2EBA               	goto	u360
   985  06B9                     u361:
   986  06B9  2EC9               	goto	l1002
   987  06BA                     u360:
   988  06BA                     l1000:
   989                           
   990                           ;Source/Header/GPIO.h: 66:         {;Source/Header/GPIO.h: 67:             GPIO_Write(GP
      +                          IO_Port, Pin, 0);
   991  06BA  0876               	movf	GPIO_Toggle@GPIO_Port,w
   992  06BB  00F0               	movwf	GPIO_Write@GPIO_Port
   993  06BC  0877               	movf	GPIO_Toggle@GPIO_Port+1,w
   994  06BD  00F1               	movwf	GPIO_Write@GPIO_Port+1
   995  06BE  0878               	movf	GPIO_Toggle@Pin,w
   996  06BF  00F9               	movwf	??_GPIO_Toggle
   997  06C0  0879               	movf	??_GPIO_Toggle,w
   998  06C1  00F2               	movwf	GPIO_Write@Pin
   999  06C2  01F3               	clrf	GPIO_Write@GPIO_State
  1000  06C3  120A  118A  2747  120A  118A  	fcall	_GPIO_Write
  1001                           
  1002                           ;Source/Header/GPIO.h: 68:         }
  1003  06C8  2ED8               	goto	l117
  1004  06C9                     l1002:
  1005                           
  1006                           ;Source/Header/GPIO.h: 70:         {;Source/Header/GPIO.h: 71:             GPIO_Write(GP
      +                          IO_Port, Pin, 1);
  1007  06C9  0876               	movf	GPIO_Toggle@GPIO_Port,w
  1008  06CA  00F0               	movwf	GPIO_Write@GPIO_Port
  1009  06CB  0877               	movf	GPIO_Toggle@GPIO_Port+1,w
  1010  06CC  00F1               	movwf	GPIO_Write@GPIO_Port+1
  1011  06CD  0878               	movf	GPIO_Toggle@Pin,w
  1012  06CE  00F9               	movwf	??_GPIO_Toggle
  1013  06CF  0879               	movf	??_GPIO_Toggle,w
  1014  06D0  00F2               	movwf	GPIO_Write@Pin
  1015  06D1  01F3               	clrf	GPIO_Write@GPIO_State
  1016  06D2  0AF3               	incf	GPIO_Write@GPIO_State,f
  1017  06D3  120A  118A  2747  120A  118A  	fcall	_GPIO_Write
  1018  06D8                     l117:
  1019  06D8  0008               	return
  1020  06D9                     __end_of_GPIO_Toggle:
  1021                           
  1022                           	psect	text8
  1023  0747                     __ptext8:	
  1024 ;; *************** function _GPIO_Write *****************
  1025 ;; Defined at:
  1026 ;;		line 12 in file "Source/Header/GPIO.h"
  1027 ;; Parameters:    Size  Location     Type
  1028 ;;  GPIO_Port       2    0[COMMON] PTR volatile unsigned ch
  1029 ;;		 -> PORTC(1), 
  1030 ;;  Pin             1    2[COMMON] unsigned char 
  1031 ;;  GPIO_State      1    3[COMMON] unsigned char 
  1032 ;; Auto vars:     Size  Location     Type
  1033 ;;		None
  1034 ;; Return value:  Size  Location     Type
  1035 ;;                  1    wreg      void 
  1036 ;; Registers used:
  1037 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1038 ;; Tracked objects:
  1039 ;;		On entry : 0/0
  1040 ;;		On exit  : 0/0
  1041 ;;		Unchanged: 0/0
  1042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1043 ;;      Params:         4       0       0       0       0
  1044 ;;      Locals:         0       0       0       0       0
  1045 ;;      Temps:          2       0       0       0       0
  1046 ;;      Totals:         6       0       0       0       0
  1047 ;;Total ram usage:        6 bytes
  1048 ;; Hardware stack levels used: 1
  1049 ;; This function calls:
  1050 ;;		Nothing
  1051 ;; This function is called by:
  1052 ;;		_GPIO_Toggle
  1053 ;; This function uses a non-reentrant model
  1054 ;;
  1055                           
  1056  0747                     _GPIO_Write:	
  1057                           ;psect for function _GPIO_Write
  1058                           
  1059  0747                     l918:	
  1060                           ;incstack = 0
  1061                           ; Regs used in _GPIO_Write: [wreg-fsr0h+status,2+status,0]
  1062                           
  1063                           
  1064                           ;Source/Header/GPIO.h: 12:     void GPIO_Write(volatile unsigned char *GPIO_Port, unsign
      +                          ed char Pin, uint8_t GPIO_State);Source/Header/GPIO.h: 13:     {;Source/Header/GPIO.h: 1
      +                          4:         if(GPIO_Port == &PORTA)
  1065  0747  3000               	movlw	0
  1066  0748  0671               	xorwf	GPIO_Write@GPIO_Port+1,w
  1067  0749  1D03               	skipz
  1068  074A  2F4D               	goto	u195
  1069  074B  3005               	movlw	5
  1070  074C  0670               	xorwf	GPIO_Write@GPIO_Port,w
  1071  074D                     u195:
  1072  074D  1D03               	skipz
  1073  074E  2F50               	goto	u191
  1074  074F  2F51               	goto	u190
  1075  0750                     u191:
  1076  0750  2F62               	goto	l922
  1077  0751                     u190:
  1078  0751                     l920:
  1079                           
  1080                           ;Source/Header/GPIO.h: 15:         {;Source/Header/GPIO.h: 16:             TRISA &= ~(1 
      +                          << Pin);
  1081  0751  3001               	movlw	1
  1082  0752  00F4               	movwf	??_GPIO_Write
  1083  0753  0A72               	incf	GPIO_Write@Pin,w
  1084  0754  2F57               	goto	u204
  1085  0755                     u205:
  1086  0755  1003               	clrc
  1087  0756  0DF4               	rlf	??_GPIO_Write,f
  1088  0757                     u204:
  1089  0757  3EFF               	addlw	-1
  1090  0758  1D03               	skipz
  1091  0759  2F55               	goto	u205
  1092  075A  0874               	movf	??_GPIO_Write,w
  1093  075B  3AFF               	xorlw	255
  1094  075C  00F5               	movwf	??_GPIO_Write+1
  1095  075D  0875               	movf	??_GPIO_Write+1,w
  1096  075E  1683               	bsf	3,5	;RP0=1, select bank1
  1097  075F  1303               	bcf	3,6	;RP1=0, select bank1
  1098  0760  0585               	andwf	5,f	;volatile
  1099                           
  1100                           ;Source/Header/GPIO.h: 17:         }
  1101  0761  2FEB               	goto	l944
  1102  0762                     l922:
  1103  0762  3000               	movlw	0
  1104  0763  0671               	xorwf	GPIO_Write@GPIO_Port+1,w
  1105  0764  1D03               	skipz
  1106  0765  2F68               	goto	u215
  1107  0766  3006               	movlw	6
  1108  0767  0670               	xorwf	GPIO_Write@GPIO_Port,w
  1109  0768                     u215:
  1110  0768  1D03               	skipz
  1111  0769  2F6B               	goto	u211
  1112  076A  2F6C               	goto	u210
  1113  076B                     u211:
  1114  076B  2F7D               	goto	l926
  1115  076C                     u210:
  1116  076C                     l924:
  1117                           
  1118                           ;Source/Header/GPIO.h: 19:         {;Source/Header/GPIO.h: 20:             TRISB &= ~(1 
      +                          << Pin);
  1119  076C  3001               	movlw	1
  1120  076D  00F4               	movwf	??_GPIO_Write
  1121  076E  0A72               	incf	GPIO_Write@Pin,w
  1122  076F  2F72               	goto	u224
  1123  0770                     u225:
  1124  0770  1003               	clrc
  1125  0771  0DF4               	rlf	??_GPIO_Write,f
  1126  0772                     u224:
  1127  0772  3EFF               	addlw	-1
  1128  0773  1D03               	skipz
  1129  0774  2F70               	goto	u225
  1130  0775  0874               	movf	??_GPIO_Write,w
  1131  0776  3AFF               	xorlw	255
  1132  0777  00F5               	movwf	??_GPIO_Write+1
  1133  0778  0875               	movf	??_GPIO_Write+1,w
  1134  0779  1683               	bsf	3,5	;RP0=1, select bank1
  1135  077A  1303               	bcf	3,6	;RP1=0, select bank1
  1136  077B  0586               	andwf	6,f	;volatile
  1137                           
  1138                           ;Source/Header/GPIO.h: 21:         }
  1139  077C  2FEB               	goto	l944
  1140  077D                     l926:
  1141  077D  3000               	movlw	0
  1142  077E  0671               	xorwf	GPIO_Write@GPIO_Port+1,w
  1143  077F  1D03               	skipz
  1144  0780  2F83               	goto	u235
  1145  0781  3007               	movlw	7
  1146  0782  0670               	xorwf	GPIO_Write@GPIO_Port,w
  1147  0783                     u235:
  1148  0783  1D03               	skipz
  1149  0784  2F86               	goto	u231
  1150  0785  2F87               	goto	u230
  1151  0786                     u231:
  1152  0786  2F98               	goto	l930
  1153  0787                     u230:
  1154  0787                     l928:
  1155                           
  1156                           ;Source/Header/GPIO.h: 23:         {;Source/Header/GPIO.h: 24:             TRISC &= ~(1 
      +                          << Pin);
  1157  0787  3001               	movlw	1
  1158  0788  00F4               	movwf	??_GPIO_Write
  1159  0789  0A72               	incf	GPIO_Write@Pin,w
  1160  078A  2F8D               	goto	u244
  1161  078B                     u245:
  1162  078B  1003               	clrc
  1163  078C  0DF4               	rlf	??_GPIO_Write,f
  1164  078D                     u244:
  1165  078D  3EFF               	addlw	-1
  1166  078E  1D03               	skipz
  1167  078F  2F8B               	goto	u245
  1168  0790  0874               	movf	??_GPIO_Write,w
  1169  0791  3AFF               	xorlw	255
  1170  0792  00F5               	movwf	??_GPIO_Write+1
  1171  0793  0875               	movf	??_GPIO_Write+1,w
  1172  0794  1683               	bsf	3,5	;RP0=1, select bank1
  1173  0795  1303               	bcf	3,6	;RP1=0, select bank1
  1174  0796  0587               	andwf	7,f	;volatile
  1175                           
  1176                           ;Source/Header/GPIO.h: 25:         }
  1177  0797  2FEB               	goto	l944
  1178  0798                     l930:
  1179  0798  3000               	movlw	0
  1180  0799  0671               	xorwf	GPIO_Write@GPIO_Port+1,w
  1181  079A  1D03               	skipz
  1182  079B  2F9E               	goto	u255
  1183  079C  3008               	movlw	8
  1184  079D  0670               	xorwf	GPIO_Write@GPIO_Port,w
  1185  079E                     u255:
  1186  079E  1D03               	skipz
  1187  079F  2FA1               	goto	u251
  1188  07A0  2FA2               	goto	u250
  1189  07A1                     u251:
  1190  07A1  2FB3               	goto	l934
  1191  07A2                     u250:
  1192  07A2                     l932:
  1193                           
  1194                           ;Source/Header/GPIO.h: 27:         {;Source/Header/GPIO.h: 28:             TRISD &= ~(1 
      +                          << Pin);
  1195  07A2  3001               	movlw	1
  1196  07A3  00F4               	movwf	??_GPIO_Write
  1197  07A4  0A72               	incf	GPIO_Write@Pin,w
  1198  07A5  2FA8               	goto	u264
  1199  07A6                     u265:
  1200  07A6  1003               	clrc
  1201  07A7  0DF4               	rlf	??_GPIO_Write,f
  1202  07A8                     u264:
  1203  07A8  3EFF               	addlw	-1
  1204  07A9  1D03               	skipz
  1205  07AA  2FA6               	goto	u265
  1206  07AB  0874               	movf	??_GPIO_Write,w
  1207  07AC  3AFF               	xorlw	255
  1208  07AD  00F5               	movwf	??_GPIO_Write+1
  1209  07AE  0875               	movf	??_GPIO_Write+1,w
  1210  07AF  1683               	bsf	3,5	;RP0=1, select bank1
  1211  07B0  1303               	bcf	3,6	;RP1=0, select bank1
  1212  07B1  0588               	andwf	8,f	;volatile
  1213                           
  1214                           ;Source/Header/GPIO.h: 29:         }
  1215  07B2  2FEB               	goto	l944
  1216  07B3                     l934:
  1217                           
  1218                           ;Source/Header/GPIO.h: 31:         {;Source/Header/GPIO.h: 32:             TRISE &= ~(1 
      +                          << Pin);
  1219  07B3  3001               	movlw	1
  1220  07B4  00F4               	movwf	??_GPIO_Write
  1221  07B5  0A72               	incf	GPIO_Write@Pin,w
  1222  07B6  2FB9               	goto	u274
  1223  07B7                     u275:
  1224  07B7  1003               	clrc
  1225  07B8  0DF4               	rlf	??_GPIO_Write,f
  1226  07B9                     u274:
  1227  07B9  3EFF               	addlw	-1
  1228  07BA  1D03               	skipz
  1229  07BB  2FB7               	goto	u275
  1230  07BC  0874               	movf	??_GPIO_Write,w
  1231  07BD  3AFF               	xorlw	255
  1232  07BE  00F5               	movwf	??_GPIO_Write+1
  1233  07BF  0875               	movf	??_GPIO_Write+1,w
  1234  07C0  1683               	bsf	3,5	;RP0=1, select bank1
  1235  07C1  1303               	bcf	3,6	;RP1=0, select bank1
  1236  07C2  0589               	andwf	9,f	;volatile
  1237  07C3  2FEB               	goto	l944
  1238  07C4                     l936:
  1239                           
  1240                           ;Source/Header/GPIO.h: 37:                 *GPIO_Port = (unsigned char)(1 << Pin);
  1241  07C4  3001               	movlw	1
  1242  07C5  00F4               	movwf	??_GPIO_Write
  1243  07C6  0A72               	incf	GPIO_Write@Pin,w
  1244  07C7  2FCA               	goto	u284
  1245  07C8                     u285:
  1246  07C8  1003               	clrc
  1247  07C9  0DF4               	rlf	??_GPIO_Write,f
  1248  07CA                     u284:
  1249  07CA  3EFF               	addlw	-1
  1250  07CB  1D03               	skipz
  1251  07CC  2FC8               	goto	u285
  1252  07CD  0874               	movf	??_GPIO_Write,w
  1253  07CE  00F5               	movwf	??_GPIO_Write+1
  1254  07CF  0870               	movf	GPIO_Write@GPIO_Port,w
  1255  07D0  0084               	movwf	4
  1256  07D1  1783               	bsf	3,7
  1257  07D2  1C71               	btfss	GPIO_Write@GPIO_Port+1,0
  1258  07D3  1383               	bcf	3,7
  1259  07D4  0875               	movf	??_GPIO_Write+1,w
  1260  07D5  0080               	movwf	0
  1261                           
  1262                           ;Source/Header/GPIO.h: 38:                 break;
  1263  07D6  2FFB               	goto	l107
  1264  07D7                     l938:
  1265                           
  1266                           ;Source/Header/GPIO.h: 40:                 *GPIO_Port &= ~(1 << Pin);
  1267  07D7  3001               	movlw	1
  1268  07D8  00F4               	movwf	??_GPIO_Write
  1269  07D9  0A72               	incf	GPIO_Write@Pin,w
  1270  07DA  2FDD               	goto	u294
  1271  07DB                     u295:
  1272  07DB  1003               	clrc
  1273  07DC  0DF4               	rlf	??_GPIO_Write,f
  1274  07DD                     u294:
  1275  07DD  3EFF               	addlw	-1
  1276  07DE  1D03               	skipz
  1277  07DF  2FDB               	goto	u295
  1278  07E0  0874               	movf	??_GPIO_Write,w
  1279  07E1  3AFF               	xorlw	255
  1280  07E2  00F5               	movwf	??_GPIO_Write+1
  1281  07E3  0870               	movf	GPIO_Write@GPIO_Port,w
  1282  07E4  0084               	movwf	4
  1283  07E5  1783               	bsf	3,7
  1284  07E6  1C71               	btfss	GPIO_Write@GPIO_Port+1,0
  1285  07E7  1383               	bcf	3,7
  1286  07E8  0875               	movf	??_GPIO_Write+1,w
  1287  07E9  0580               	andwf	0,f
  1288                           
  1289                           ;Source/Header/GPIO.h: 41:                 break;
  1290  07EA  2FFB               	goto	l107
  1291  07EB                     l944:
  1292  07EB  0873               	movf	GPIO_Write@GPIO_State,w
  1293  07EC  00F4               	movwf	??_GPIO_Write
  1294  07ED  01F5               	clrf	??_GPIO_Write+1
  1295                           
  1296                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1297                           ; Switch size 1, requested type "simple"
  1298                           ; Number of cases is 1, Range of values is 0 to 0
  1299                           ; switch strategies available:
  1300                           ; Name         Instructions Cycles
  1301                           ; simple_byte            4     3 (average)
  1302                           ; direct_byte           11     8 (fixed)
  1303                           ; jumptable            260     6 (fixed)
  1304                           ;	Chosen strategy is simple_byte
  1305  07EE  0875               	movf	??_GPIO_Write+1,w
  1306  07EF  3A00               	xorlw	0	; case 0
  1307  07F0  1903               	skipnz
  1308  07F1  2FF3               	goto	l1084
  1309  07F2  2FD7               	goto	l938
  1310  07F3                     l1084:
  1311                           
  1312                           ; Switch size 1, requested type "simple"
  1313                           ; Number of cases is 2, Range of values is 0 to 1
  1314                           ; switch strategies available:
  1315                           ; Name         Instructions Cycles
  1316                           ; simple_byte            7     4 (average)
  1317                           ; direct_byte           14     8 (fixed)
  1318                           ; jumptable            260     6 (fixed)
  1319                           ;	Chosen strategy is simple_byte
  1320  07F3  0874               	movf	??_GPIO_Write,w
  1321  07F4  3A00               	xorlw	0	; case 0
  1322  07F5  1903               	skipnz
  1323  07F6  2FD7               	goto	l938
  1324  07F7  3A01               	xorlw	1	; case 1
  1325  07F8  1903               	skipnz
  1326  07F9  2FC4               	goto	l936
  1327  07FA  2FD7               	goto	l938
  1328  07FB                     l107:
  1329  07FB  0008               	return
  1330  07FC                     __end_of_GPIO_Write:
  1331                           
  1332                           	psect	text9
  1333  068E                     __ptext9:	
  1334 ;; *************** function _GPIO_Read *****************
  1335 ;; Defined at:
  1336 ;;		line 48 in file "Source/Header/GPIO.h"
  1337 ;; Parameters:    Size  Location     Type
  1338 ;;  GPIO_Port       2    0[COMMON] PTR volatile unsigned ch
  1339 ;;		 -> PORTC(1), 
  1340 ;;  Pin             1    2[COMMON] unsigned char 
  1341 ;; Auto vars:     Size  Location     Type
  1342 ;;  GPIO_State      1    4[COMMON] unsigned char 
  1343 ;; Return value:  Size  Location     Type
  1344 ;;                  1    wreg      unsigned char 
  1345 ;; Registers used:
  1346 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1347 ;; Tracked objects:
  1348 ;;		On entry : 0/0
  1349 ;;		On exit  : 0/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1352 ;;      Params:         3       0       0       0       0
  1353 ;;      Locals:         1       0       0       0       0
  1354 ;;      Temps:          1       0       0       0       0
  1355 ;;      Totals:         5       0       0       0       0
  1356 ;;Total ram usage:        5 bytes
  1357 ;; Hardware stack levels used: 1
  1358 ;; This function calls:
  1359 ;;		Nothing
  1360 ;; This function is called by:
  1361 ;;		_GPIO_Toggle
  1362 ;; This function uses a non-reentrant model
  1363 ;;
  1364                           
  1365  068E                     _GPIO_Read:	
  1366                           ;psect for function _GPIO_Read
  1367                           
  1368  068E                     l952:	
  1369                           ;incstack = 0
  1370                           ; Regs used in _GPIO_Read: [wreg-fsr0h+status,2+status,0]
  1371                           
  1372  068E                     l954:
  1373                           
  1374                           ;Source/Header/GPIO.h: 52:         if(*GPIO_Port & (1 << Pin))
  1375  068E  0870               	movf	GPIO_Read@GPIO_Port,w
  1376  068F  0084               	movwf	4
  1377  0690  1783               	bsf	3,7
  1378  0691  1C71               	btfss	GPIO_Read@GPIO_Port+1,0
  1379  0692  1383               	bcf	3,7
  1380  0693  3001               	movlw	1
  1381  0694  00F3               	movwf	??_GPIO_Read
  1382  0695  0A72               	incf	GPIO_Read@Pin,w
  1383  0696  2E99               	goto	u304
  1384  0697                     u305:
  1385  0697  1003               	clrc
  1386  0698  0DF3               	rlf	??_GPIO_Read,f
  1387  0699                     u304:
  1388  0699  3EFF               	addlw	-1
  1389  069A  1D03               	skipz
  1390  069B  2E97               	goto	u305
  1391  069C  0873               	movf	??_GPIO_Read,w
  1392  069D  0500               	andwf	0,w
  1393  069E  1903               	btfsc	3,2
  1394  069F  2EA1               	goto	u311
  1395  06A0  2EA2               	goto	u310
  1396  06A1                     u311:
  1397  06A1  2EA5               	goto	l958
  1398  06A2                     u310:
  1399  06A2                     l956:
  1400                           
  1401                           ;Source/Header/GPIO.h: 53:         {;Source/Header/GPIO.h: 54:             GPIO_State = 
      +                          1;
  1402  06A2  01F4               	clrf	GPIO_Read@GPIO_State
  1403  06A3  0AF4               	incf	GPIO_Read@GPIO_State,f
  1404                           
  1405                           ;Source/Header/GPIO.h: 55:         }
  1406  06A4  2EA6               	goto	l960
  1407  06A5                     l958:
  1408                           
  1409                           ;Source/Header/GPIO.h: 57:         {;Source/Header/GPIO.h: 58:             GPIO_State = 
      +                          0;
  1410  06A5  01F4               	clrf	GPIO_Read@GPIO_State
  1411  06A6                     l960:
  1412                           
  1413                           ;Source/Header/GPIO.h: 60:         return GPIO_State;
  1414  06A6  0874               	movf	GPIO_Read@GPIO_State,w
  1415  06A7                     l112:
  1416  06A7  0008               	return
  1417  06A8                     __end_of_GPIO_Read:
  1418  007E                     btemp	set	126	;btemp
  1419  007E                     wtemp0	set	126
  1420                           
  1421                           	psect	config
  1422                           
  1423                           ;Config register CONFIG @ 0x2007
  1424                           ;	Oscillator Selection bits
  1425                           ;	FOSC = HS, HS oscillator
  1426                           ;	Watchdog Timer Enable bit
  1427                           ;	WDTE = OFF, WDT disabled
  1428                           ;	Power-up Timer Enable bit
  1429                           ;	PWRTE = OFF, PWRT disabled
  1430                           ;	Brown-out Reset Enable bit
  1431                           ;	BOREN = OFF, BOR disabled
  1432                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1433                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1434                           ;	Data EEPROM Memory Code Protection bit
  1435                           ;	CPD = OFF, Data EEPROM code protection off
  1436                           ;	Flash Program Memory Write Enable bits
  1437                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1438                           ;	In-Circuit Debugger Mode bit
  1439                           ;	DEBUG = 0x1, unprogrammed default
  1440                           ;	Flash Program Memory Code Protection bit
  1441                           ;	CP = OFF, Code protection off
  1442  2007                     	org	8199
  1443  2007  3F3A               	dw	16186

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      10
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    GPIO_Toggle@GPIO_Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    GPIO_Read@GPIO_Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    GPIO_Write@GPIO_Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 


Critical Paths under _main in COMMON

    _Loop->_GPIO_Toggle
    _Timer_Delay->_Timer1_BASE_Init
    _GPIO_Toggle->_GPIO_Write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1478
                               _Loop
                         _MCU_Config
 ---------------------------------------------------------------------------------
 (1) _MCU_Config                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Loop                                                 0     0      0    1478
                        _GPIO_Toggle
                        _Timer_Delay
 ---------------------------------------------------------------------------------
 (2) _Timer_Delay                                          5     3      2     165
                                              1 COMMON     5     3      2
                   _Timer0_BASE_Init
                   _Timer1_BASE_Init
                   _Timer2_BASE_Init
 ---------------------------------------------------------------------------------
 (3) _Timer2_BASE_Init                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timer1_BASE_Init                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Timer0_BASE_Init                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GPIO_Toggle                                          4     1      3    1313
                                              6 COMMON     4     1      3
                          _GPIO_Read
                         _GPIO_Write
 ---------------------------------------------------------------------------------
 (3) _GPIO_Write                                           6     2      4     808
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _GPIO_Read                                            5     2      3     221
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Loop
     _GPIO_Toggle
       _GPIO_Read
       _GPIO_Write
     _Timer_Delay
       _Timer0_BASE_Init
       _Timer1_BASE_Init
       _Timer2_BASE_Init
   _MCU_Config

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Sat Apr 16 18:00:21 2022

                      l61 0650                        l70 0746                        l55 0669  
                      l80 0716                        l58 065C                        l74 0705  
                      l83 071B                        l75 070A                        l91 064A  
                      l84 0720                        l79 070F               ?_GPIO_Write 0070  
                     l112 06A7                       l120 068D                       l107 07FB  
                     l117 06D8                       l720 065D                       l730 0665  
                     l722 0661                       l732 0666                       l724 0662  
                     l740 0654                       l734 0667                       l726 0663  
                     l742 0658                       l750 064B                       l920 0751  
                     l736 0668                       l728 0664                       l744 0659  
                     l752 064E                       l930 0798                       l922 0762  
                     l746 065A                       l738 0651                       l754 064F  
                     l932 07A2                       l924 076C                       l748 065B  
                     l934 07B3                       l926 077D                       l918 0747  
                     l960 06A6                       l952 068E                       l936 07C4  
                     l928 0787                       l944 07EB                       l954 068E  
                     l938 07D7                       l970 06E7                       l956 06A2  
                     l980 0712                       l972 06EC                       l964 06DA  
                     l958 06A5                       l982 071E                       l966 06DB  
                     l968 06E1                       l976 06F2                       l986 0725  
                     l978 0706                       l988 0738                       l998 06A8  
                     u210 076C                       u211 076B                       u204 0757  
                     u205 0755                       u310 06A2                       u230 0787  
                     u311 06A1                       u231 0786                       u215 0768  
                     u304 0699                       u224 0772                       u320 070E  
                     u305 0697                       u225 0770                       u321 070D  
                     u250 07A2                       u330 071A                       u251 07A1  
                     u235 0783                       u331 0719                       u244 078D  
                     u340 0724                       u245 078B                       u341 0723  
                     u190 0751                       u350 0746                       u255 079E  
                     u191 0750                       u351 0745                       u264 07A8  
                     u360 06BA                       u265 07A6                       u361 06B9  
                     u274 07B9                       u275 07B7                       u195 074D  
                     u284 07CA                       u285 07C8                       u294 07DD  
                     u295 07DB                       fsr0 0004                       indf 0000  
Timer_Delay@timer_counter 0075         ?_Timer0_BASE_Init 0070        ??_Timer0_BASE_Init 0070  
            ?_GPIO_Toggle 0076                      l1000 06BA                      l1002 06C9  
                    l1004 0678                      l1006 066A                      l1008 066F  
                    l1080 06FA                      l1082 072D                      l1084 07F3  
       ?_Timer1_BASE_Init 0070                      _TMR0 0001                      _TMR2 0011  
             ?_MCU_Config 0070                      _Loop 0678                      _main 066A  
      ??_Timer1_BASE_Init 0070                      btemp 007E                      start 0000  
       ?_Timer2_BASE_Init 0070        ??_Timer2_BASE_Init 0070                     ?_Loop 0070  
                   ?_main 0070                     _T1CON 0010                     _T2CON 0012  
                   _TMR1H 000F                     _TMR1L 000E                     _PORTA 0005  
                   _PORTB 0006                     _PORTC 0007                     _PORTD 0008  
                   _TRISA 0085                     _TRISB 0086                     _TRISC 0087  
                   _TRISD 0088                     _TRISE 0089                     status 0003  
                   wtemp0 007E           __initialization 07FC              __end_of_Loop 068E  
            __end_of_main 0678                    ??_Loop 007A                    ??_main 007A  
       __end_of_GPIO_Read 06A8       GPIO_Write@GPIO_Port 0070                    _T1SYNC 0082  
                  _INTCON 000B                    _TMR0IF 005A                    _TMR1IF 0060  
                  _TMR1CS 0081                    _TMR2IF 0061                    _TMR1ON 0080  
                  _TMR2ON 0092              GPIO_Read@Pin 0072             ??_Timer_Delay 0073  
 __end_of__initialization 07FC            __pcstackCOMMON 0070              ??_GPIO_Write 0074  
     __end_of_Timer_Delay 0747              ??_MCU_Config 0070        __end_of_GPIO_Write 07FC  
              __pmaintext 066A      GPIO_Write@GPIO_State 0073                   _T2CKPS1 0091  
                 _T1OSCEN 0083        __end_of_MCU_Config 064B               _Timer_Delay 06D9  
                 __ptext1 064A                   __ptext2 0678                   __ptext3 06D9  
                 __ptext4 064B                   __ptext5 0651                   __ptext6 065D  
                 __ptext7 06A8                   __ptext8 0747                   __ptext9 068E  
               _GPIO_Read 068E      end_of_initialization 07FC       GPIO_Read@GPIO_State 0074  
           GPIO_Write@Pin 0072                ?_GPIO_Read 0070      GPIO_Toggle@GPIO_Port 0076  
        _Timer0_BASE_Init 065D          _Timer1_BASE_Init 0651          _Timer2_BASE_Init 064B  
     start_initialization 07FC             ??_GPIO_Toggle 0079                 ___latbits 0002  
             ??_GPIO_Read 0073       __end_of_GPIO_Toggle 06D9              ?_Timer_Delay 0071  
      GPIO_Read@GPIO_Port 0070  __end_of_Timer0_BASE_Init 066A               _GPIO_Toggle 06A8  
__end_of_Timer1_BASE_Init 065D  __end_of_Timer2_BASE_Init 0651                _GPIO_Write 0747  
          GPIO_Toggle@Pin 0078          Timer_Delay@value 0071                _MCU_Config 064A  
              _OPTION_REG 0081  
